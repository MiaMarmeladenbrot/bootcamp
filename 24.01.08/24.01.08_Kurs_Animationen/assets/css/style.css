main {
  display: flex;
  flex-direction: column;
  align-items: center;
}

div {
  background-color: red;
  border-radius: 10px;
  color: white;
  height: 120px;
  width: 120px;
  margin-bottom: 150px;
  display: flex;
  justify-content: center;
  align-items: center;

  /* # Transition & Transform*/
  /* ! Transition */
  /* ? muss im Elternelement/Hauptselektor stehen, nicht im Kind-Element (hier hover); braucht dann aber eine folgende transform-property, auf die es sich beziehen kann; 
  ? kann 4 Werte annehmen, müssen aber nicht alle vergeben werden; das Wichtigste/Mindestangabe ist die Zeit, Wert Nummer 2 */
  /* 1. Wert = Was soll animiert werden? (all = animiert alle unter transform festgelegten Angaben (default))
    2. Wert = Wie lange soll Animation dauern?
    3. Wert = Wie lange es verzögert werden?
    4. Wert = Wie soll die Animation ablaufen? (auf cubic-bezier.com kann man selbst Funktionen bestimmen)
    */
  transition: all 0.9s 0.2s ease-in-out;

  /* ? man kann aber auch einzelne properties aus dem transform-Element ansprechen; sogar mehrere gleichzeitig mit unterschiedlichen Verzögerungen: */
  /* transition: background-color 0.5s, border-radius 5s; */
}

/* ? bezieht sich auf transition oben im div-Selektor */
div:hover {
  /* ! Transform */
  /* ? translateX verschiebt das Element auf der X-Achse */
  transform: translateX(50px);
  background-color: blue;
  border-radius: 50px;

  /* ! Translate */
  /* ? translateX verschiebt das Element auf der Y-Achse */
  transform: translateY(50px);

  /* ? translate() verschiebt das Element sowohl auf der X- als auch auf der Y-Achse*/
  transform: translate(50px, 100px);

  /* ! Rotate */
  /* ? rotiert auf Y-Achse */
  transform: rotateY(180deg);

  /* ? rotiert auf X-Achse */
  transform: rotateX(180deg);

  /* ? rotiert um die eigene Achse; auch praktisch, um zum Beispiel Icons im Code zu rotieren und anzupassen */
  transform: rotate(180deg);

  /* ! Scale */
  /* ? skaliert das Element */
  transform: scale(2);
  /* ? skaliert das Element auf der X-Achse*/
  transform: scaleX(2);
  /* ? skaliert das Element auf der Y-Achse*/
  transform: scaleY(2);

  /* ! Skew */
  /* ? animiert die Höhe und Breite der Ecken */
  transform: skew(50deg, 30deg);

  /* ! Mehrere Transform-values zusammen als Shortcut */
  transform: translate(50px, 50px) rotate(90deg) scale(2);

  /* ! Transform Origin */
  /* ? normalerweise würde sich das Element einmal zentriert um die eigene Achse drehen, mit origin kann ich den Startpunkt verlagern, sodass es sich um eine andere Achse dreht */
  transform: rotate(150deg);
  transform-origin: top left;
}

/* # Animation */
/* ! from-to-Animation */
section p {
  font-size: 50px;

  /* Verknüpfung zum definierten Keyframe unten
  folgende Wert brauchen wir zum Ausführen der Animation: 
  1. Wert = Name der Animation (bei keyframes definiert)
  2. Wert = Länge der Animation (in Sekunden)
  3. Wert = Verlauf der Animation (ease-in-out etc.; cubic-bezier.com)
  4. Wert = Häufigkeit der Animation (Zahl, infinite)
  5. Wert = Richtung der Animation (normal, alternate, linear, forwards)
  6. Wert = Verzögerung der Animation (in Sekunden)
   */
  animation: rotateherz 2s ease-in-out infinite alternate 2s;
}

@keyframes rotateherz {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

/* ! Prozent-Animation */
@keyframes scaleBIGMarzio {
  0%,
  100% {
    transform: scale(1);
  }

  50% {
    transform: scale(1.5);
  }

  /* 100% {
    transform: scale(1);
  } */
}

h1 {
  animation: scaleBIGMarzio 2s linear infinite;
}

/* # weitere Animationen */
/* ! ein Kasten, der einmal um die Runde läuft */
.animation {
  background-color: grey;
  height: 500px;
  width: 500px;
}

.animation article {
  height: 50%;
  width: 50%;
  background-color: red;
  animation: move 5s linear infinite normal;
}

@keyframes move {
  0%,
  100% {
    background-color: green;
  }
  25% {
    transform: translateY(100%);
    background-color: red;
  }
  50% {
    transform: translate(100%, 100%);
    background-color: aqua;
  }

  75% {
    transform: translateX(100%);
    background-color: white;
  }
}

/* ! Bälle, die springen */
.loading {
  background-color: blue;
  width: 100%;
  height: 550px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 5px;
}

.loading div {
  border-radius: 50px;
  height: 50px;
  width: 50px;
}

@keyframes loader {
  0%,
  100% {
    transform: translateY(0px);
  }

  50% {
    transform: translateY(-30px);
    background-color: orange;
  }
}

.loading div:nth-of-type(1) {
  animation: loader 2s infinite ease-in-out;
}

.loading div:nth-of-type(2) {
  animation: loader 2s infinite ease-in-out 0.2s;
}

.loading div:nth-of-type(3) {
  animation: loader 2s infinite ease-in-out 0.4s;
}

.loading div:nth-of-type(4) {
  animation: loader 2s infinite ease-in-out 0.6s;
}
